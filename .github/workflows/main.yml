name: Datamosh Video and Create Release

on:
  push:
    paths:
      - 'videos/*.mp4'
      - 'videos/*.mov'
  workflow_dispatch:
    inputs:
      video_file_path:
        description: '処理する動画ファイルへのパス (例: videos/input.mp4)'
        required: true
        default: 'videos/input.mp4'
      glitch_count:
        description: 'グリッチの回数'
        required: false
        default: '15'
      glitch_strength:
        description: 'グリッチの強度 (バイト数)'
        required: false
        default: '10000'

permissions: # ワークフロー全体の権限を設定
  contents: write # リリース作成とアセットアップロードのために必要
  # pull-requests: write # 必要であればプルリクエストの権限も追加

jobs:
  datamosh:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Get changed video files (for push event)
      id: changed-videos
      if: github.event_name == 'push' # pushイベントの場合のみ実行
      uses: tj-actions/changed-files@v40
      with:
        files: |
          videos/*.mp4
          videos/*.mov

    - name: Set input variables for processing
      id: set-inputs
      run: |
        INPUT_FILE=""
        GLITCH_COUNT="${{ github.event.inputs.glitch_count || '15' }}" # workflow_dispatch からの入力、またはデフォルト値
        GLITCH_STRENGTH="${{ github.event.inputs.glitch_strength || '10000' }}" # workflow_dispatch からの入力、またはデフォルト値

        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          INPUT_FILE="${{ github.event.inputs.video_file_path }}"
        elif [ "${{ github.event_name }}" == "push" ]; then
          # pushイベントの場合は、変更されたファイルのうち最初の1つを処理対象とする（または全ての変更ファイルをループ処理）
          # ここでは簡単のため、変更されたファイルのリストを直接使わず、次ステップで個別に処理
          # `tj-actions/changed-files` が設定されているので、実際にはそのoutputを使います
          echo "Processing push event. Files will be processed by iterating over changed-videos output."
        fi

        echo "input_file=$INPUT_FILE" >> $GITHUB_OUTPUT
        echo "glitch_count=$GLITCH_COUNT" >> $GITHUB_OUTPUT
        echo "glitch_strength=$GLITCH_STRENGTH" >> $GITHUB_OUTPUT


    - name: Run datamoshing (Push event)
      if: github.event_name == 'push' && steps.changed-videos.outputs.any_changed == 'true'
      run: |
        echo "Found changed video files: ${{ steps.changed-videos.outputs.changed_files }}"
        for file in ${{ steps.changed-videos.outputs.changed_files }}; do
          echo "Processing $file..."
          INPUT_DIR=$(dirname "$file")
          INPUT_FILENAME=$(basename "$file")
          FILENAME_NO_EXT="${INPUT_FILENAME%.*}"
          OUTPUT_FILENAME="${FILENAME_NO_EXT}_datamoshed.mp4"
          OUTPUT_PATH="${INPUT_DIR}/${OUTPUT_FILENAME}"

          # データモッシングスクリプトを実行
          python datamosh.py "$file" "$OUTPUT_PATH" "${{ steps.set-inputs.outputs.glitch_count }}" "${{ steps.set-inputs.outputs.glitch_strength }}"
          
          if [ -f "$OUTPUT_PATH" ]; then
            echo "Successfully created $OUTPUT_PATH"
          else
            echo "Failed to create $OUTPUT_PATH"
            exit 1
          fi
        done

    - name: Run datamoshing (Manual workflow_dispatch)
      id: run-manual-datamosh
      if: github.event_name == 'workflow_dispatch'
      run: |
        INPUT_FILE="${{ steps.set-inputs.outputs.input_file }}"
        GLITCH_COUNT="${{ steps.set-inputs.outputs.glitch_count }}"
        GLITCH_STRENGTH="${{ steps.set-inputs.outputs.glitch_strength }}"

        if [[ -z "$INPUT_FILE" ]]; then
          echo "エラー: 'video_file_path' が指定されていません。"
          exit 1
        fi
        if [[ ! -f "$INPUT_FILE" ]]; then
          echo "エラー: 指定されたファイル '$INPUT_FILE' が見つかりません。"
          exit 1
        fi

        INPUT_DIR=$(dirname "$INPUT_FILE")
        INPUT_FILENAME=$(basename "$INPUT_FILE")
        FILENAME_NO_EXT="${INPUT_FILENAME%.*}"
        OUTPUT_FILENAME="${FILENAME_NO_EXT}_datamoshed.mp4"
        OUTPUT_PATH="${INPUT_DIR}/${OUTPUT_FILENAME}"

        echo "Processing $INPUT_FILE..."
        echo "Output will be saved to $OUTPUT_PATH"
        echo "Glitch Count: $GLITCH_COUNT"
        echo "Glitch Strength: $GLITCH_STRENGTH"

        python datamosh.py "$INPUT_FILE" "$OUTPUT_PATH" "$GLITCH_COUNT" "$GLITCH_STRENGTH"

        if [ -f "$OUTPUT_PATH" ]; then
          echo "Successfully created $OUTPUT_PATH"
          echo "output_path=$OUTPUT_PATH" >> $GITHUB_OUTPUT # 次のステップで利用するため出力
          echo "output_filename=$OUTPUT_FILENAME" >> $GITHUB_OUTPUT
        else
          echo "Failed to create $OUTPUT_PATH"
          exit 1
        fi

    - name: Create Release and Upload Asset
      if: (github.event_name == 'push' && steps.changed-videos.outputs.any_changed == 'true') || (github.event_name == 'workflow_dispatch' && success())
      id: create_release_and_upload
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # tag_name: v${{ github.run_number }}-${{ github.run_id }} # 新しいタグ名
        # `git tag` は実行済みを想定。push時に自動でタグが作られるようにするか、または手動タグを推奨
        # あるいは、ここでは既存タグを利用するか、tag_nameを動的に生成する
        tag_name: datamoshed-videos-${{ github.run_number }} # ユニークなタグを生成
        name: Datamoshed Videos ${{ github.run_number }} # リリース名
        body: |
          自動生成されたデータモッシュ動画。
          
          **トリガーイベント:** ${{ github.event_name }}
          **処理されたファイル:** ${{ github.event_name == 'workflow_dispatch' && steps.run-manual-datamosh.outputs.output_filename || steps.changed-videos.outputs.changed_files }}

        draft: false # ドラフトリリースではない
        prerelease: false # プレリリースではない
        files: |
          # pushイベントの場合、videos/ディレクトリ内の_datamoshed.mp4ファイルをすべてアップロード
          ${{ github.event_name == 'push' && 'videos/*_datamoshed.mp4' || '' }}
          # workflow_dispatchの場合、特定の出力ファイルのみをアップロード
          ${{ github.event_name == 'workflow_dispatch' && steps.run-manual-datamosh.outputs.output_path || '' }}
